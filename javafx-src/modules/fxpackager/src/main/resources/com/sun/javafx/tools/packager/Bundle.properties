MSG_Version=JavaFX Packager version
MSG_Help_1=Usage: javafxpackager -command [-options]\n\
     \n\
where command is one of: \n\
\  -createjar\n\
\          The packager produces jar archive according to other parameters. \n\
\  -deploy \n\
\          The packager generates the jnlp and html files according to other\n\
\          parameters.\n\
\  -createbss\n\
\          Converts css file into binary form \n\
\  -signJar\n\
\          Signs jar file(s) with a provided certificate.\n\
\  -makeall\n\
\          Performs compilation, createjar and deploy steps as one call with \n\
\          most arguments predefined. The sources must be located in "src"\n\
\          folder, the resulting files (jar, jnlp, html) are put in "dist"\n\
\          folder. This command may be configured only in a minimal way and is\n\
\          as automated as possible.\n\
\n
MSG_Help_2=Options for createjar command include: \n\
\  -appclass <application class>\n\
\          qualified name of the application class to be executed.\n\
\  -preloader <preloader class>\n\
\          qualified name of the preloader class to be executed.\n\
\  -paramfile <file>\n\
\          properties file with default named application parameters.\n\
\  -argument arg\n\
\          An unnamed argument to be put in <fx:argument> element in the JNLP\n\
\          file.\n\
\  -classpath <files>\n\
\          list of dependent jar file names.\n\
\  -manifestAttrs <manifest attributes>\n\
\          List of additional manifest attributes. Syntax: "name1=value1,\n\
\          name2=value2,name3=value3.\n\
\  -noembedlauncher \n\
\          If present, the packager will not add the JavaFX launcher classes\n\
\          to the jarfile.\n\
\  -nocss2bin\n\
\          The packager won't convert CSS files to binary form before copying\n\
\          to jar. \n\
\  -runtimeversion <version> \n\
\          version of the required JavaFX Runtime.\n\
\  -outdir <dir>\n\
\          name of the directory to generate output file to.\n\
\  -outfile <filename>\n\
\          The name (without the extension) of the resulting file.\n\
\  -srcdir <dir>\n\
\          Base dir of the files to pack.\n\
\  -srcfiles <files>\n\
\          List of files in srcdir. If omitted, all files in srcdir (which\n\
\          is a mandatory argument in this case) will be packed.\n\
\n
MSG_Help_3=Options for deploy command include:\n\
\  -title <title>\n\
\          title of the application.\n\
\  -vendor <vendor>\n\
\          vendor of the application.\n\
\  -description <description>\n\
\          description of the application.\n\
\  -appclass <application class>\n\
\          qualified name of the application class to be executed.\n\
\  -preloader <preloader class>\n\
\          qualified name of the preloader class to be executed.\n\
\  -paramfile <file>\n\
\          properties file with default named application parameters.\n\
\  -htmlparamfile <file>\n\
\          properties file with parameters for the resulting applet.\n\
\  -width <width>\n\
\          width of the application.\n\
\  -height <height>\n\
\          height of the application.\n\
\  -native <type>\n\
\          generate self-contained application bundles (if possible).\n\
\          If type is specified then only bundle of this type is created.\n\
\          List of supported types includes: installer, image, exe, msi, dmg, rpm, deb.\n\
\  -name <name>\n\
\          name of the application.\n\
\  -embedjnlp\n\
\          If present, the jnlp file will be embedded in the html document.\n\
\  -embedCertificates\n\
\          If present, the certificates will be embedded in the jnlp file.\n\
\  -allpermissions\n\
\          If present, the application will require all security permissions \n\
\          in the jnlp file.\n\
\  -updatemode <updatemode>\n\
\          sets the update mode for the jnlp file.\n\
\  -isExtension\n\
\          if present, the srcfiles are treated as extensions.\n\
\  -callbacks\n\
\          specifies user callback methods in generated HTML. The format is\n\
\          "name1:value1,name2:value2,..."\n\
\  -templateInFilename\n\
\          name of the html template file. Placeholders are in form of\n\
\          #XXXX.YYYY(APPID)#\n\
\  -templateOutFilename\n\
\          name of the html file to write the filled-in template to.\n\
\  -templateId\n\
\          Application ID of the application for template processing.\n\
\  -argument arg\n\
\          An unnamed argument to be put in <fx:argument> element in the JNLP\n\
\          file.\n\
\  -outdir <dir>\n\
\          name of the directory to generate output file to.\n\
\  -outfile <filename>\n\
\          The name (without the extension) of the resulting file.\n\
\  -srcdir <dir>\n\
\          Base dir of the files to pack.\n\
\  -srcfiles <files>\n\
\          List of files in srcdir. If omitted, all files in srcdir (which\n\
\          is a mandatory argument in this case) will be used.\n\
\n
MSG_Help_4=Options for createbss command include:\n\
\  -outdir <dir>\n\
\          name of the directory to generate output file to.\n\
\  -srcdir <dir>\n\
\          Base dir of the files to pack.\n\
\  -srcfiles <files>\n\
\          List of files in srcdir. If omitted, all files in srcdir (which\n\
\          is a mandatory argument in this case) will be used.\n\
\n
MSG_Help_5=Options for signJar command include:\n\
\  -keyStore <file>\n\
\          Keystore filename.\n\
\  -alias \n\
\          Alias for the key.\n\
\  -storePass\n\
\          Password to check integrity of the keystore or unlock the keystore.\n\
\  -keyPass\n\
\          Password for recovering the key.\n\
\  -storeType\n\
\          Keystore type, the default value is "jks".\n\
\  -outdir <dir>\n\
\          name of the directory to generate output file(s) to.\n\
\  -srcdir <dir>\n\
\          Base dir of the files to signed.\n\
\  -srcfiles <files>\n\
\          List of files in srcdir. If omitted, all files in srcdir (which\n\
\          is a mandatory argument in this case) will be signed.\n\
\n
MSG_Help_6=Options for makeAll command include:\n\
\  -appclass <application class>\n\
\          qualified name of the application class to be executed.\n\
\  -preloader <preloader class>\n\
\          qualified name of the preloader class to be executed.\n\
\  -classpath <files>\n\
\          list of dependent jar file names.\n\
\  -name <name>\n\
\          name of the application.\n\
\  -width <width>\n\
\          width of the application.\n\
\  -height <height>\n\
\          height of the application.\n\
\  -v      enable verbose output.\n\
\n
MSG_Help_7=Sample usages:\n\
--------------\n\
javafxpackager -createjar -appclass package.ClassName  \n\
\  -srcdir classes -outdir out -outfile outjar -v\n\
\          Packages the content of the classes directory to outjar.jar,\n\
\          sets the application class to package.ClassName.\n\
javafxpackager -deploy -outdir outdir -outfile outfile -width 34 -height 43 \n\
\  -name AppName -appclass package.ClassName -v -srcdir compiled\n\
\          Generates outfile.jnlp and corresponding outfile.html files in \n\
\          outdir for aplication AppName that is started by package.ClassName\n\
\          class and has dimensions of 34x43.\n\
javafxpackager -makeall -appclass brickbreaker.Main -name BrickBreaker\n\
\  -width 600 -height 600\n\
\          This command does all the packaging work including compilation: \n\
\          compile, createjar, deploy.


ERR_UnknownArgument=Error: Unknown argument: {0}
ERR_UnknownCommand=Error: Unknown command: {0}
ERR_BSSConversionFailed=Error: Conversion of CSS file to binary form failed for file: {0}, reason: {1}
ERR_UnknownReason=Unknown reason
ERR_MissingArgument=Error: Missing argument: {0}
ERR_IllegalCSSFile=Error: -cssfile argument must be a readable file
ERR_EmbedingLauncher=Error: Missing embedded resource [{0}]
ERR_CreatingDirFailed=Error: Failed to create directory {0}
ERR_CreatingFileFailed=Error: Failed to create file {0}
ERR_CreatingTempFileFailed=Error: Failed to create temporary file
ERR_CreatingJarFailed=Error: Failed to create jar file {0}
ERR_FileCopyFailed=Error: Failed copy file to directory {0}
ERR_FileReadFailed=Error: Failed reading file {0}
ERR_CantFindRuntime=Error: jfxrt.jar needs to be on classpath for -createbss and for -createJar without -nocss2bin
ERR_CantDeleteFile=Error: File {0} could not be deleted.
ERR_MissingDirectory=Missing directory {0}
ERR_EmptySourceDirectory=Empty source directory {0}
ERR_MissingJavaHome=Error: Java home directory is not known.
ERR_MissingJavaFxHome=Error: JavaFx home directory is not known.
ERR_JavacFailed=Error: javac execution failed, exit code: {0}
ERR_MakeAllJavacFailed=Error: compilation of java sources failed
ERR_DeployFailed=Error: deploy failed
ERR_InvalidStoreFile=Error: Invalid keystore file: {0}
ERR_SignFailed=Error: Signing failed
ERR_MissingAppResources=Error: No application jars found
