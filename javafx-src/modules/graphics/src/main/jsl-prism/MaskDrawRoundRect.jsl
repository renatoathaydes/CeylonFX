/*
 * Copyright (c) 2009, 2013, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

param float2 oinvarcradii;
param float2 iinvarcradii;

// See MaskFillRoundRect.jsl for a description of the coordinate system and
// parameters used by these calculations.  This shader simply performs those
// calculations twice, once with the values for the outer round rect and again
// with the values for the inner round rect, then subtracts the 2 coverages.

float rrmask(float2 arcreltco, float2 invarcradii)
{
    float2 ecctco = arcreltco * invarcradii;
    float ecclensq = dot(ecctco, ecctco);
    float pix = dot(ecctco / ecclensq, invarcradii);
    return clamp(0.5 + (1.0 - ecclensq)/(2.0*pix), 0.0, 1.0);
}

float mask(float2 tco, float2 flatdim)
{
    float2 arcreltco = max(abs(tco) - flatdim, 0.001);

    float ocov = rrmask(arcreltco, oinvarcradii);
    float icov = rrmask(arcreltco, iinvarcradii);

    return clamp(ocov - icov, 0.0, 1.0);
}
