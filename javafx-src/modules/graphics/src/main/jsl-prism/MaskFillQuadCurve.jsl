/*
 * Copyright (c) 2009, 2013, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

/*
 * For quadratic curves the expression we use is:
 *   v^2 - w < 0
 * where:
 *   tc0.x = v
 *   tc0.y = w
 *   tc1.x = inv (either 1 or -1)
 *   tc1.y = (unused)
 *
 * Based on the algorithm described in "Rendering Vector Art on the GPU"
 * (GPU Gems 3, Chapter 25).
 */
float mask(float2 tc0, float2 tc1)
{
    // Gradients
    float2 px = ddx(tc0);
    float2 py = ddy(tc0);

    // Chain rule
    float fx = (2.0*tc0.x)*px.x - px.y;
    float fy = (2.0*tc0.y)*py.x - py.y;

    // Signed distance
    float sd = tc1.x * ((tc0.x*tc0.x - tc0.y) / sqrt(fx*fx + fy*fy));

    // Linear alpha
    float alpha = 0.5 - sd;

    return clamp(alpha, 0.0, 1.0);
}
