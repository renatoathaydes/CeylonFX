/*
 * Copyright (c) 2011, 2013, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

<<
private float[] centerTmp = new float[2];
private float[] deltaTmp = new float[2];

private ZoomRadialBlurState getState() {
    return (ZoomRadialBlurState)AccessHelper.getState(getEffect());
}

private float[] getCenter() {
    ZoomRadialBlurState state = getState();
    centerTmp[0] = (float)(getEffect().getCenterX() * state.getDx());
    centerTmp[1] = (float)(getEffect().getCenterY() * state.getDy());
    return centerTmp;
}

private float getAlpha() {
    return getState().getAlpha();
}

private int getNumSteps() {
    return getState().getNumSteps();
}

private float[] getDelta() {
    ZoomRadialBlurState state = getState();
    deltaTmp[0] = state.getDx();
    deltaTmp[1] = state.getDy();
    return deltaTmp;
}

private float getRadius() {
    return getEffect().getRadius();
}
>>

param sampler img;
param float2 center;
param float alpha;
param int numSteps;
param float radius;
param float2 delta;

void main()
{
    int i;
    color = float4(0.0, 0.0, 0.0, 1.0);

    float2 d = normalize(pos0 - center);
    d *= delta;
    float2 p = -radius * d;

    unroll (%d, 64) for (i = 0; i < numSteps; i++) {
        p += d;
        color.rgb += alpha*sample(img, pos0 + p).rgb;
    }
}
