/*
 * Copyright (c) 2011, 2013, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

<<
private float getOpacity() {
    return getEffect().getOpacity();
}
>>

param sampler botImg;
param sampler topImg;
param float opacity;

//
// All blend modes are based on the same equations:
//
// Ra = Ba + Ta - Ba x Ta
// Ra x Rc' = [(1 - Ta) x Ba x Bc'] + [(1 - Ba) x Ta x Tc'] + Ba x Ta x B(Bc', Tc')
//
// where
//
// Ba  = bottom alpha
// Bc' = bottom non-premultiplied color
// Ta  = top alpha
// Tc' = top non-premultiplied color
// Ra = result alpha
// Rc' = result non-premultiplied color
// B(Bc', Tc') = blend mode equation
//
// If the colors are premultiplied then the second equation becomes
//
// Rc = [(1 - Ta) x Bc] + [(1 - Ba) x Tc] + Ba x Ta x B(Bc / Ba, Tc / Ta)
//
// where
//
// Bc = bottom premultiplied color
// Tc = top premultiplied color
// Rc = result premultiplied color
//
// For a given mode the final equation is therefore derived from the blend
// mode equation applied to the premultiplied colors and substituted in the
// above equation for Rc.
//
// Reference:
// PDF Reference, sixth edition, Adobe Portable Document Format, Version 1.7,
// November 2006, section 7.2.
//

// placeholder for blend_<mode>() function
%s

void main()
{
    float4 bot = sample(botImg, pos0);
    float4 top = sample(topImg, pos1) * opacity;
    color = blend_%s(bot, top);
}
