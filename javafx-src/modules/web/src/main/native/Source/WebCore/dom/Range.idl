/*
 * Copyright (C) 2006 Apple Computer, Inc.
 * Copyright (C) 2006 Samuel Weinig <sam.weinig@gmail.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public License
 * along with this library; see the file COPYING.LIB.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301, USA.
 */

    // Introduced in DOM Level 2:
[
    ImplementationLacksVTable
] interface Range {

        readonly attribute Node startContainer
            getter raises(DOMException);
        readonly attribute long startOffset
            getter raises(DOMException);
        readonly attribute Node endContainer
            getter raises(DOMException);
        readonly attribute long endOffset
            getter raises(DOMException);
        readonly attribute boolean collapsed
            getter raises(DOMException);
        readonly attribute Node commonAncestorContainer
            getter raises(DOMException);

    [ObjCLegacyUnnamedParameters] void setStart([Default=Undefined] optional Node refNode, 
                                 [Default=Undefined] optional long offset)
            raises(RangeException, DOMException);
    [ObjCLegacyUnnamedParameters] void setEnd([Default=Undefined] optional Node refNode, 
                               [Default=Undefined] optional long offset)
            raises(RangeException, DOMException);
    void setStartBefore([Default=Undefined] optional Node refNode)
            raises(RangeException, DOMException);
    void setStartAfter([Default=Undefined] optional Node refNode)
            raises(RangeException, DOMException);
    void setEndBefore([Default=Undefined] optional Node refNode)
            raises(RangeException, DOMException);
    void setEndAfter([Default=Undefined] optional Node refNode)
            raises(RangeException, DOMException);
    void collapse([Default=Undefined] optional boolean toStart)
            raises(DOMException);
    void selectNode([Default=Undefined] optional Node refNode)
            raises(RangeException, DOMException);
    void selectNodeContents([Default=Undefined] optional Node refNode)
            raises(RangeException, DOMException);

        // CompareHow
        const unsigned short START_TO_START = 0;
        const unsigned short START_TO_END   = 1;
        const unsigned short END_TO_END     = 2;
        const unsigned short END_TO_START   = 3;

    [ObjCLegacyUnnamedParameters] short compareBoundaryPoints([Default=Undefined] optional CompareHow how,
                                               [Default=Undefined] optional Range sourceRange)
            raises(DOMException);

        void deleteContents()
            raises(DOMException);
        DocumentFragment extractContents()
            raises(DOMException);
        DocumentFragment cloneContents()
            raises(DOMException);
    void insertNode([Default=Undefined] optional Node newNode)
            raises(DOMException, RangeException);
    void surroundContents([Default=Undefined] optional Node newParent)
            raises(DOMException, RangeException);
        Range cloneRange()
            raises(DOMException);
        DOMString toString()
            raises(DOMException);

        void detach()
            raises(DOMException);

#if defined(LANGUAGE_JAVASCRIPT) || LANGUAGE_JAVASCRIPT
        // CSSOM View Module API extensions

        ClientRectList getClientRects();
        ClientRect getBoundingClientRect();
#endif

        // extensions

    DocumentFragment createContextualFragment([Default=Undefined] optional DOMString html)
            raises(DOMException);

        // WebKit extensions

    boolean intersectsNode([Default=Undefined] optional Node refNode)
            raises(RangeException, DOMException);

    short compareNode([Default=Undefined] optional Node refNode)
            raises(RangeException, DOMException);

        // CompareResults
        const unsigned short NODE_BEFORE           = 0;
        const unsigned short NODE_AFTER            = 1;
        const unsigned short NODE_BEFORE_AND_AFTER = 2;
        const unsigned short NODE_INSIDE           = 3;

    short comparePoint([Default=Undefined] optional Node refNode, 
                       [Default=Undefined] optional long offset)
            raises(RangeException, DOMException);

    boolean isPointInRange([Default=Undefined] optional Node refNode, 
                           [Default=Undefined] optional long offset)
            raises(RangeException, DOMException);

    void expand([Default=Undefined] optional DOMString unit)
            raises(RangeException, DOMException);

#if !defined(LANGUAGE_JAVASCRIPT) || !LANGUAGE_JAVASCRIPT
        readonly attribute DOMString text;
#endif
    };

