/*
 * Copyright (C) 2010 Google Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1.  Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 * 2.  Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

[
    Conditional=INDEXED_DATABASE,
    JSNoStaticTables,
    ImplementationLacksVTable
] interface IDBObjectStore {
    [TreatReturnedNullStringAs=Null] readonly attribute DOMString name;
    [ImplementedAs=keyPathAny] readonly attribute IDBAny keyPath;
        readonly attribute DOMStringList indexNames;
        readonly attribute IDBTransaction transaction;
        readonly attribute boolean autoIncrement;

    [CallWith=ScriptState] IDBRequest put(any value, optional any key)
        raises (DOMException);
    [CallWith=ScriptState] IDBRequest add(any value, optional any key)
        raises (DOMException);
    [CallWith=ScriptExecutionContext, ImplementedAs=deleteFunction] IDBRequest delete(IDBKeyRange? keyRange)
        raises (DOMException);
    [CallWith=ScriptExecutionContext, ImplementedAs=deleteFunction] IDBRequest delete(any key)
        raises (DOMException);
        [CallWith=ScriptExecutionContext] IDBRequest clear()
        raises (DOMException);
    [CallWith=ScriptExecutionContext] IDBRequest get(IDBKeyRange? key)
        raises (DOMException);
    [CallWith=ScriptExecutionContext] IDBRequest get(any key)
        raises (DOMException);
    [CallWith=ScriptExecutionContext] IDBRequest openCursor(optional IDBKeyRange? range, optional DOMString direction)
        raises (DOMException);
    [CallWith=ScriptExecutionContext] IDBRequest openCursor(any key, optional DOMString direction)
        raises (DOMException);

    [CallWith=ScriptExecutionContext, Custom] IDBIndex createIndex(DOMString name, sequence<DOMString> keyPath, optional Dictionary options)
        raises (DOMException);
    [CallWith=ScriptExecutionContext, Custom] IDBIndex createIndex(DOMString name, DOMString keyPath, optional Dictionary options)
        raises (DOMException);
    IDBIndex index(DOMString name)
        raises (DOMException);
    void deleteIndex(DOMString name)
        raises (DOMException);
    [CallWith=ScriptExecutionContext] IDBRequest count(optional IDBKeyRange? range)
        raises (DOMException);
    [CallWith=ScriptExecutionContext] IDBRequest count(any key)
        raises (DOMException);
    };
