/* 
 * Copyright (c) 2011, 2013, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

package javafx.scene.chart;

/**
Builder class for javafx.scene.chart.Chart
@see javafx.scene.chart.Chart
@deprecated This class is deprecated and will be removed in the next version
* @since JavaFX 2.0
*/
@javax.annotation.Generated("Generated by javafx.builder.processor.BuilderProcessor")
@Deprecated
public abstract class ChartBuilder<B extends javafx.scene.chart.ChartBuilder<B>> extends javafx.scene.layout.RegionBuilder<B> {    
    protected ChartBuilder() {
    }
    
    
    private int __set;
    public void applyTo(javafx.scene.chart.Chart x) {
        super.applyTo(x);
        int set = __set;
        if ((set & (1 << 0)) != 0) x.setAnimated(this.animated);
        if ((set & (1 << 1)) != 0) x.setLegendSide(this.legendSide);
        if ((set & (1 << 2)) != 0) x.setLegendVisible(this.legendVisible);
        if ((set & (1 << 3)) != 0) x.setTitle(this.title);
        if ((set & (1 << 4)) != 0) x.setTitleSide(this.titleSide);
    }
    
    private boolean animated;
    /**
    Set the value of the {@link javafx.scene.chart.Chart#getAnimated() animated} property for the instance constructed by this builder.
    */
    @SuppressWarnings("unchecked")
    public B animated(boolean x) {
        this.animated = x;
        __set |= 1 << 0;
        return (B) this;
    }
    
    private javafx.geometry.Side legendSide;
    /**
    Set the value of the {@link javafx.scene.chart.Chart#getLegendSide() legendSide} property for the instance constructed by this builder.
    */
    @SuppressWarnings("unchecked")
    public B legendSide(javafx.geometry.Side x) {
        this.legendSide = x;
        __set |= 1 << 1;
        return (B) this;
    }
    
    private boolean legendVisible;
    /**
    Set the value of the {@link javafx.scene.chart.Chart#isLegendVisible() legendVisible} property for the instance constructed by this builder.
    */
    @SuppressWarnings("unchecked")
    public B legendVisible(boolean x) {
        this.legendVisible = x;
        __set |= 1 << 2;
        return (B) this;
    }
    
    private java.lang.String title;
    /**
    Set the value of the {@link javafx.scene.chart.Chart#getTitle() title} property for the instance constructed by this builder.
    */
    @SuppressWarnings("unchecked")
    public B title(java.lang.String x) {
        this.title = x;
        __set |= 1 << 3;
        return (B) this;
    }
    
    private javafx.geometry.Side titleSide;
    /**
    Set the value of the {@link javafx.scene.chart.Chart#getTitleSide() titleSide} property for the instance constructed by this builder.
    */
    @SuppressWarnings("unchecked")
    public B titleSide(javafx.geometry.Side x) {
        this.titleSide = x;
        __set |= 1 << 4;
        return (B) this;
    }
    
}
