/* 
 * Copyright (c) 2011, 2013, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

/* 
 * Copyright (c) 2011, 2013, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

package javafx.scene.chart;

/**
Builder class for javafx.scene.chart.Axis
@see javafx.scene.chart.Axis
@deprecated This class is deprecated and will be removed in the next version
* @since JavaFX 2.0
*/
@javax.annotation.Generated("Generated by javafx.builder.processor.BuilderProcessor")
@Deprecated
public abstract class AxisBuilder<T, B extends javafx.scene.chart.AxisBuilder<T, B>> extends javafx.scene.layout.RegionBuilder<B> {
    protected AxisBuilder() {
    }
    
    
    private int __set;
    private void __set(int i) {
        __set |= 1 << i;
    }
    public void applyTo(javafx.scene.chart.Axis<T> x) {
        super.applyTo(x);
        int set = __set;
        while (set != 0) {
            int i = Integer.numberOfTrailingZeros(set);
            set &= ~(1 << i);
            switch (i) {
                case 0: x.setAnimated(this.animated); break;
                case 1: x.setAutoRanging(this.autoRanging); break;
                case 2: x.setLabel(this.label); break;
                case 3: x.setSide(this.side); break;
                case 4: x.setTickLabelFill(this.tickLabelFill); break;
                case 5: x.setTickLabelFont(this.tickLabelFont); break;
                case 6: x.setTickLabelGap(this.tickLabelGap); break;
                case 7: x.setTickLabelRotation(this.tickLabelRotation); break;
                case 8: x.setTickLabelsVisible(this.tickLabelsVisible); break;
                case 9: x.setTickLength(this.tickLength); break;
                case 10: x.getTickMarks().addAll(this.tickMarks); break;
                case 11: x.setTickMarkVisible(this.tickMarkVisible); break;
            }
        }
    }
    
    private boolean animated;
    /**
    Set the value of the {@link javafx.scene.chart.Axis#getAnimated() animated} property for the instance constructed by this builder.
    */
    @SuppressWarnings("unchecked")
    public B animated(boolean x) {
        this.animated = x;
        __set(0);
        return (B) this;
    }
    
    private boolean autoRanging;
    /**
    Set the value of the {@link javafx.scene.chart.Axis#isAutoRanging() autoRanging} property for the instance constructed by this builder.
    */
    @SuppressWarnings("unchecked")
    public B autoRanging(boolean x) {
        this.autoRanging = x;
        __set(1);
        return (B) this;
    }
    
    private java.lang.String label;
    /**
    Set the value of the {@link javafx.scene.chart.Axis#getLabel() label} property for the instance constructed by this builder.
    */
    @SuppressWarnings("unchecked")
    public B label(java.lang.String x) {
        this.label = x;
        __set(2);
        return (B) this;
    }
    
    private javafx.geometry.Side side;
    /**
    Set the value of the {@link javafx.scene.chart.Axis#getSide() side} property for the instance constructed by this builder.
    */
    @SuppressWarnings("unchecked")
    public B side(javafx.geometry.Side x) {
        this.side = x;
        __set(3);
        return (B) this;
    }
    
    private javafx.scene.paint.Paint tickLabelFill;
    /**
    Set the value of the {@link javafx.scene.chart.Axis#getTickLabelFill() tickLabelFill} property for the instance constructed by this builder.
    */
    @SuppressWarnings("unchecked")
    public B tickLabelFill(javafx.scene.paint.Paint x) {
        this.tickLabelFill = x;
        __set(4);
        return (B) this;
    }
    
    private javafx.scene.text.Font tickLabelFont;
    /**
    Set the value of the {@link javafx.scene.chart.Axis#getTickLabelFont() tickLabelFont} property for the instance constructed by this builder.
    */
    @SuppressWarnings("unchecked")
    public B tickLabelFont(javafx.scene.text.Font x) {
        this.tickLabelFont = x;
        __set(5);
        return (B) this;
    }
    
    private double tickLabelGap;
    /**
    Set the value of the {@link javafx.scene.chart.Axis#getTickLabelGap() tickLabelGap} property for the instance constructed by this builder.
    */
    @SuppressWarnings("unchecked")
    public B tickLabelGap(double x) {
        this.tickLabelGap = x;
        __set(6);
        return (B) this;
    }
    
    private double tickLabelRotation;
    /**
    Set the value of the {@link javafx.scene.chart.Axis#getTickLabelRotation() tickLabelRotation} property for the instance constructed by this builder.
    */
    @SuppressWarnings("unchecked")
    public B tickLabelRotation(double x) {
        this.tickLabelRotation = x;
        __set(7);
        return (B) this;
    }
    
    private boolean tickLabelsVisible;
    /**
    Set the value of the {@link javafx.scene.chart.Axis#isTickLabelsVisible() tickLabelsVisible} property for the instance constructed by this builder.
    */
    @SuppressWarnings("unchecked")
    public B tickLabelsVisible(boolean x) {
        this.tickLabelsVisible = x;
        __set(8);
        return (B) this;
    }
    
    private double tickLength;
    /**
    Set the value of the {@link javafx.scene.chart.Axis#getTickLength() tickLength} property for the instance constructed by this builder.
    */
    @SuppressWarnings("unchecked")
    public B tickLength(double x) {
        this.tickLength = x;
        __set(9);
        return (B) this;
    }
    
    private java.util.Collection<? extends javafx.scene.chart.Axis.TickMark<T>> tickMarks;
    /**
    Add the given items to the List of items in the {@link javafx.scene.chart.Axis#getTickMarks() tickMarks} property for the instance constructed by this builder.
    */
    @SuppressWarnings("unchecked")
    public B tickMarks(java.util.Collection<? extends javafx.scene.chart.Axis.TickMark<T>> x) {
        this.tickMarks = x;
        __set(10);
        return (B) this;
    }
    
    /**
    Add the given items to the List of items in the {@link javafx.scene.chart.Axis#getTickMarks() tickMarks} property for the instance constructed by this builder.
    */
    public B tickMarks(javafx.scene.chart.Axis.TickMark<T>... x) {
        return tickMarks(java.util.Arrays.asList(x));
    }
    
    private boolean tickMarkVisible;
    /**
    Set the value of the {@link javafx.scene.chart.Axis#isTickMarkVisible() tickMarkVisible} property for the instance constructed by this builder.
    */
    @SuppressWarnings("unchecked")
    public B tickMarkVisible(boolean x) {
        this.tickMarkVisible = x;
        __set(11);
        return (B) this;
    }
    
}
