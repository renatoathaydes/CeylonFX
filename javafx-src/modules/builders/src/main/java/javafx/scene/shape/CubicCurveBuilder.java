/* 
 * Copyright (c) 2011, 2013, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

package javafx.scene.shape;

/**
Builder class for javafx.scene.shape.CubicCurve
@see javafx.scene.shape.CubicCurve
@deprecated This class is deprecated and will be removed in the next version
* @since JavaFX 2.0
*/
@javax.annotation.Generated("Generated by javafx.builder.processor.BuilderProcessor")
@Deprecated
public class CubicCurveBuilder<B extends javafx.scene.shape.CubicCurveBuilder<B>> extends javafx.scene.shape.ShapeBuilder<B> implements javafx.util.Builder<javafx.scene.shape.CubicCurve> {
    protected CubicCurveBuilder() {
    }
    
    /** Creates a new instance of CubicCurveBuilder. */
    @SuppressWarnings({"deprecation", "rawtypes", "unchecked"})
    public static javafx.scene.shape.CubicCurveBuilder<?> create() {
        return new javafx.scene.shape.CubicCurveBuilder();
    }
    
    private int __set;
    private void __set(int i) {
        __set |= 1 << i;
    }
    public void applyTo(javafx.scene.shape.CubicCurve x) {
        super.applyTo(x);
        int set = __set;
        while (set != 0) {
            int i = Integer.numberOfTrailingZeros(set);
            set &= ~(1 << i);
            switch (i) {
                case 0: x.setControlX1(this.controlX1); break;
                case 1: x.setControlX2(this.controlX2); break;
                case 2: x.setControlY1(this.controlY1); break;
                case 3: x.setControlY2(this.controlY2); break;
                case 4: x.setEndX(this.endX); break;
                case 5: x.setEndY(this.endY); break;
                case 6: x.setStartX(this.startX); break;
                case 7: x.setStartY(this.startY); break;
            }
        }
    }
    
    private double controlX1;
    /**
    Set the value of the {@link javafx.scene.shape.CubicCurve#getControlX1() controlX1} property for the instance constructed by this builder.
    */
    @SuppressWarnings("unchecked")
    public B controlX1(double x) {
        this.controlX1 = x;
        __set(0);
        return (B) this;
    }
    
    private double controlX2;
    /**
    Set the value of the {@link javafx.scene.shape.CubicCurve#getControlX2() controlX2} property for the instance constructed by this builder.
    */
    @SuppressWarnings("unchecked")
    public B controlX2(double x) {
        this.controlX2 = x;
        __set(1);
        return (B) this;
    }
    
    private double controlY1;
    /**
    Set the value of the {@link javafx.scene.shape.CubicCurve#getControlY1() controlY1} property for the instance constructed by this builder.
    */
    @SuppressWarnings("unchecked")
    public B controlY1(double x) {
        this.controlY1 = x;
        __set(2);
        return (B) this;
    }
    
    private double controlY2;
    /**
    Set the value of the {@link javafx.scene.shape.CubicCurve#getControlY2() controlY2} property for the instance constructed by this builder.
    */
    @SuppressWarnings("unchecked")
    public B controlY2(double x) {
        this.controlY2 = x;
        __set(3);
        return (B) this;
    }
    
    private double endX;
    /**
    Set the value of the {@link javafx.scene.shape.CubicCurve#getEndX() endX} property for the instance constructed by this builder.
    */
    @SuppressWarnings("unchecked")
    public B endX(double x) {
        this.endX = x;
        __set(4);
        return (B) this;
    }
    
    private double endY;
    /**
    Set the value of the {@link javafx.scene.shape.CubicCurve#getEndY() endY} property for the instance constructed by this builder.
    */
    @SuppressWarnings("unchecked")
    public B endY(double x) {
        this.endY = x;
        __set(5);
        return (B) this;
    }
    
    private double startX;
    /**
    Set the value of the {@link javafx.scene.shape.CubicCurve#getStartX() startX} property for the instance constructed by this builder.
    */
    @SuppressWarnings("unchecked")
    public B startX(double x) {
        this.startX = x;
        __set(6);
        return (B) this;
    }
    
    private double startY;
    /**
    Set the value of the {@link javafx.scene.shape.CubicCurve#getStartY() startY} property for the instance constructed by this builder.
    */
    @SuppressWarnings("unchecked")
    public B startY(double x) {
        this.startY = x;
        __set(7);
        return (B) this;
    }
    
    /**
    Make an instance of {@link javafx.scene.shape.CubicCurve} based on the properties set on this builder.
    */
    public javafx.scene.shape.CubicCurve build() {
        javafx.scene.shape.CubicCurve x = new javafx.scene.shape.CubicCurve();
        applyTo(x);
        return x;
    }
}
