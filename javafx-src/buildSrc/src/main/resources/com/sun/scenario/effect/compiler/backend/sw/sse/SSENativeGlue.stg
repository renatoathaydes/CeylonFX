group SSENativeGlue;

glue(peerName,jniName,paramDecls,arrayGet,arrayRelease,
     pixInitY,pixInitX,posDecls,posInitY,posIncrY,posInitX,posIncrX,
     body) ::= <<
/*
 * Copyright (c) 2008, 2013, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

/*
 * This file was generated by JSLC -- DO NOT EDIT MANUALLY!
 */

#include <jni.h>
#include <math.h>
#include "SSEUtils.h"
#include "com_sun_scenario_effect_impl_sw_sse_SSE$peerName$Peer.h"

JNIEXPORT void JNICALL
Java_com_sun_scenario_effect_impl_sw_sse_SSE$jniName$Peer_filter
  (JNIEnv *env, jclass klass,
   jintArray dst_arr,
   jint dstx, jint dsty, jint dstw, jint dsth, jint dstscan$paramDecls$)
{
    int dyi;
    float color_x, color_y, color_z, color_w;

    $arrayGet$

    $posDecls$

    $posInitY$
    for (int dy = dsty; dy < dsty+dsth; dy++) {
        $pixInitY$
        dyi = dy*dstscan;

        $posInitX$
        for (int dx = dstx; dx < dstx+dstw; dx++) {
            $pixInitX$

            $body$

            if (color_w < 0.f) color_w = 0.f; else if (color_w > 1.f) color_w = 1.f;
            if (color_x < 0.f) color_x = 0.f; else if (color_x > color_w) color_x = color_w;
            if (color_y < 0.f) color_y = 0.f; else if (color_y > color_w) color_y = color_w;
            if (color_z < 0.f) color_z = 0.f; else if (color_z > color_w) color_z = color_w;
            dst[dyi+dx] =
                ((int)(color_x * 0xff) << 16) |
                ((int)(color_y * 0xff) <<  8) |
                ((int)(color_z * 0xff) <<  0) |
                ((int)(color_w * 0xff) << 24);

            $posIncrX$
        }

        $posIncrY$
    }

    $arrayRelease$
}

>>
